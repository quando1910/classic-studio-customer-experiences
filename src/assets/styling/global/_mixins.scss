// === RESPOND ABOVE ===
// @include respond-above(small) {}
@mixin respond-above($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// === RESPOND BELOW ===
// @include respond-below(small) {}
@mixin respond-below($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// === RESPOND BETWEEN ===
// @include respond-between(small, medium);
@mixin respond-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if (map-has-key($breakpoints, $lower) == false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }
    @if (map-has-key($breakpoints, $upper) == false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

@mixin border-radius($radius) {
  -webkit-border-radius: $radius;
  -moz-border-radius: $radius;
  border-radius: $radius;
}
@mixin box-shadow($shadow) {
  box-shadow: $shadow;
  -webkit-box-shadow: $shadow;
  -moz-box-shadow: $shadow;
}
@mixin transition($transition) {
  -webkit-transition: $transition;
  -moz-transition: $transition;
  -ms-transition: $transition;
  -o-transition: $transition;
  transition: $transition;
}
@mixin transform($value) {
  -ms-transform: $value;
  -webkit-transform: $value;
  transform: $value;
}
@mixin transformX($transition) {
  -ms-transform: translateX($transition);
  -webkit-transform: translateX($transition);
  transform: translateX($transition);
}
@mixin opacity($opacity) {
  -webkit-opacity: $opacity;
  -moz-opacity: $opacity;
  opacity: $opacity;
}
@mixin clearfix() {
  &::after {
    display: block;
    content: "";
    clear: both;
  }
}
@mixin font-icon($icon) {
  content: map-get($font-icon, $icon);
  font-family: map-get($font-family, icon);
  -webkit-font-smoothing: antialiased;
}
@mixin border-box($border-box) {
  -webkit-box-sizing: $border-box;
  -moz-box-sizing: $border-box;
  box-sizing: $border-box;
}

// Flexbox display
@mixin flexbox() {
  display: -webkit-box;
  display: -moz-box;
  display: -ms-flexbox;
  display: -webkit-flex;
  display: flex;
}
@mixin flex-wrap($wrap) {
  -webkit-flex-wrap: $wrap;
     -moz-flex-wrap: $wrap;
      -ms-flex-wrap: $wrap;
          flex-wrap: $wrap;
}

@mixin box-shadow($val1,$val2){
  box-shadow: 0 $val1 $val2 rgba(34, 25, 25, 0.4);
  -moz-box-shadow: 0 $val1 $val2 rgba(34,25,25,0.4);
  -webkit-box-shadow: 0 $val1 $val2 rgba(34, 25, 25, 0.4);
}

@mixin s320 {
  @media (max-width: 320px) {
    @content;
  }
 }
 @mixin s370 {
  @media (min-width: 321px) and (max-width: 370px) {
    @content;
  }
 }
 @mixin s380 {
  @media (min-width: 380px) {
    @content;
  }
 }
 @mixin s420 {
  @media (min-width: 420px) {
    @content;
  }
 }
 @mixin s480 {
  @media (min-width: 480px) {
    @content;
  }
 }
 @mixin s640 {
  @media (min-width: 640px) {
    @content;
  }
 }
 @mixin sl640 {
  @media (max-width: 639px) {
    @content;
  }
 }
 @mixin s568{
  @media (min-width: 568px) {
    @content;
  }
 }
 @mixin s768 {
  @media (min-width: 768px) {
    @content;
  }
 }
 @mixin sl768 {
  @media (max-width: 767px) {
    @content;
  }
 }
 @mixin s767 {
  @media (min-width: 767px) {
    @content;
  }
 }
 @mixin s768 {
  @media (min-width: 768px) {
    @content;
  }
 }
 @mixin s960 {
  @media (min-width: 960px) {
    @content;
  }
 }
 @mixin sl960 {
  @media (max-width: 960px) {
    @content;
  }
 }
 @mixin s1024 {
  @media (min-width: 1024px) {
    @content;
  }
 }
 @mixin s1190 {
  @media (min-width: 1190px) {
    @content;
  }
 }
 //convert pxRem

 @function strip-units($number) {
  @return $number / ($number * 0 + 1);
 }

 @function convertRootPxToEm($value) {
  // check for null:
  @if($value == null) {
    @return $value;
  }
  // assume em:
  @if (unitless($value) or unit($value) == em) {
    @return 0em + $value;
  }
  @else {
    @return 0em + strip-units($value)/13;
  }
 }
 @function convertPxToRem($px) {
 @return 0rem + strip-units($px)/13;
 }

 @mixin pxRem($property,$values) {
  // Create a couple of empty lists as output buffers:
  $px-values: ();
  $rem-values: ();

  // Ensure $values is a list.
  @if type-of($values) != 'list' {
    $values: join((), $values);
  }

  // Loop through the $values list:
  @each $value in $values {
    @if type-of($value) == number and (unitless($value) or unit($value) == px) {
    $px-values: join($px-values, 0px + ($value));
      $rem-values: join($rem-values, convertPxToRem($value));
    }
    @else {
    // no conversion:
    $px-values: join($px-values, $value);
    $rem-values: join($rem-values, $value);
    }
  }

  #{$property}: $px-values;

  // don't add media query if it's not needed:
  @if $px-values != $rem-values {
    // @media only all {
      #{$property}: $rem-values;
    // }
  }
}
 